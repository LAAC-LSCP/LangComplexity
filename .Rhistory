boxplot(mydata_sub[, i] ~ mydata_sub$CR, # draw boxplots by group
ylab = names(mydata_sub[i]), # rename y-axis with variable's name
xlab = "CR"
)
print(t.test(mydata_sub[, i] ~ mydata_sub$CR)) # print results of t-test
# boxplots and t-tests for the 4 variables at once
for (i in 1:4) { # variables to compare are variables 1 to 4
boxplot(mydata_sub[, i] ~ mydata_sub$CR, # draw boxplots by group
ylab = names(mydata_sub[i]), # rename y-axis with variable's name
xlab = "CR")
print(t.test(mydata_sub[, i] ~ mydata_sub$CR)) # print results of t-test
}
# boxplots and t-tests for the 4 variables at once
for (i in 1:4) { # variables to compare are variables 1 to 4
boxplot(mydata_sub[, i] ~ mydata_sub$Mad_syl_comp, # draw boxplots by group
ylab = names(mydata_sub[i]), # rename y-axis with variable's name
xlab = "Mad_syl_comp")
print(t.test(mydata_sub[, i] ~ mydata_sub$Mad_syl_comp)) # print results of t-test
}
# boxplots and t-tests for the 4 variables at once
for (i in 1:4) { # variables to compare are variables 1 to 4
boxplot(mydata_sub[, i] ~ mydata_sub$age, # draw boxplots by group
ylab = names(mydata_sub[i]), # rename y-axis with variable's name
xlab = "Mad_syl_comp")
print(t.test(mydata_sub[, i] ~ mydata_sub$age)) # print results of t-test
}
View(mydata_sub)
# Edit from here
x <- which(names(mydata_sub) == "Mad_syl_comp") # name of grouping variable
y <- which(names(mydata_sub) == "CR" # names of variables to test
| names(mydata_sub) == "Low"
| names(mydata_sub) == "Moderate"
| names(mydata_sub) == "High")
method1 <- "anova" # one of "anova" or "kruskal.test"
method2 <- "t.test" # one of "wilcox.test" or "t.test"
my_comparisons <- list(c("Low", "Moderate"), c("Low", "High"), c("Moderate", "High")) # comparisons for post-hoc tests
# Edit until here
# Edit at your own risk
for (i in y) {
for (j in x) {
p <- ggboxplot(mydata_sub,
x = colnames(mydata_sub[j]), y = colnames(mydata_sub[i]),
color = colnames(mydata_sub[j]),
legend = "none",
palette = "npg",
add = "jitter"
)
print(
p + stat_compare_means(aes(label = paste0(..method.., ", p-value = ", ..p.format..)),
method = method1, label.y = max(mydata_sub[, i], na.rm = TRUE)
)
+ stat_compare_means(comparisons = my_comparisons, method = method2, label = "p.format") # remove if p-value of ANOVA or Kruskal-Wallis test >= alpha
)
}
}
# Edit from here
x <- which(names(mydata_sub) == "Mad_C") # name of grouping variable
y <- which(names(mydata_sub) == "CR" # names of variables to test
| names(mydata_sub) == "Low"
| names(mydata_sub) == "Moderate"
| names(mydata_sub) == "High")
method1 <- "anova" # one of "anova" or "kruskal.test"
method2 <- "t.test" # one of "wilcox.test" or "t.test"
my_comparisons <- list(c("Low", "Moderate"), c("Low", "High"), c("Moderate", "High")) # comparisons for post-hoc tests
# Edit until here
# Edit at your own risk
for (i in y) {
for (j in x) {
p <- ggboxplot(mydata_sub,
x = colnames(mydata_sub[j]), y = colnames(mydata_sub[i]),
color = colnames(mydata_sub[j]),
legend = "none",
palette = "npg",
add = "jitter"
)
print(
p + stat_compare_means(aes(label = paste0(..method.., ", p-value = ", ..p.format..)),
method = method1, label.y = max(mydata_sub[, i], na.rm = TRUE)
)
+ stat_compare_means(comparisons = my_comparisons, method = method2, label = "p.format") # remove if p-value of ANOVA or Kruskal-Wallis test >= alpha
)
}
}
ggboxplot(mydata_sub, x = "age", y = "CR", color = "Mad_VQ",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(mydata_sub, x = "age", y = "CR", color = "Mad_VQ",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800"))
library(tidyverse) # I wasn't able to run this package from groundhog in Windows
library(car) # I wasn't able to run this package from groundhog in Windows
library(groundhog)
groundhog.day="2021-02-23"
pkgs=c('tidyverse','ggplot2','gvlma','car','RCurl','plyr','readxl','knitr',
'rmarkdown')
groundhog.library(pkgs, groundhog.day)
# Seed for random number generation
set.seed(22)
#document session info
capture.output(sessionInfo(),file="lastknit_session_info.txt")
opts_chunk$set(echo = TRUE)
# Generate canonical proportion for data from .eaf
# French Solomon Tsimane
raw_eaf_data<- read_excel("RawData/Raw_data_full.xlsx")
raw_eaf_data$Subtier_type<-NA
raw_eaf_data$Subtier_type[grep("vcm",raw_eaf_data$Subtier)]<-"vcm"
raw_eaf_data$clean_ChildID <- gsub("_period.*","",gsub("_._period.*","",raw_eaf_data$Filename))
raw_eaf_data$clean_ChildID <- gsub("random.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("periodic.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("_LD.*","",raw_eaf_data$clean_ChildID)
vcm_tab <- table(raw_eaf_data$clean_ChildID[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"],raw_eaf_data$Type[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"])
vcm_tab_chi_eaf <- vcm_tab[,"C"]/(vcm_tab[,"C"]+vcm_tab[,"N"])
# Generate canonical proportion for data from cychosz
#contains: Casillas-Yeli  Cychosz Seedlings    Tsimane    Warlaumont
raw_cychosz_data<- read_csv("Data/meta_answers_global_crossling_9-20.csv")
raw_cychosz_data$unique_child_ID <- paste(raw_cychosz_data$language,raw_cychosz_data$child_ID)
vcm_tab <- table(raw_cychosz_data$unique_child_ID,raw_cychosz_data$Answer)
vcm_tab_chi_cychosz <- vcm_tab[,"Canonical"]/(vcm_tab[,"Canonical"]+vcm_tab[,"Non-canonical"])
# Generate canonical proportion for data from zooniverse #TODO
#contains: Yélî & Tsimane
other_data<- read_excel("Data/CR_by_child-updated_21_01.xlsx")
other_data_tsi<- read_excel("Data/CR_by_child_tsi.xlsx")
# we'll use the best and most data we can:
#- Yélî will come from zooniverse-other DONE
#- Tsimane will come from zooniverse-tsi DONE
#- French Solomon from eaf DONE
#- the rest of the corpora will come from cychosz TODO
#also, we want to be able to merge our CPs into other_data because other_data has age of the child
best_data=other_data[other_data$corpus %in% c("Yélî"),]
#next, add tsi kids
#best_data <- merge(best_data,other_data_tsi, by="ChildID", all=T)
best_data2 <- rbind.fill(best_data,other_data_tsi) #it merge datasets smoothly in this way
#next, add French & Solomon + Tsimane
#to this end, first we need to add the CPs
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CR","ChildID") #renamed column to ChildID for consistency
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CR))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$CR <- NULL #what if we get rid of CR column here so in the following merging we could work with R calculated data
other_data_fs$ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$ChildID <- gsub("random.*","",other_data_fs$ChildID)
other_data_fs$ChildID <- gsub("periodic.*","",other_data_fs$ChildID)
other_data_fs$ChildID <- gsub("_LD.*","",other_data_fs$ChildID)
other_data_fs<- merge(other_data_fs,vcm_tab_chi_eaf2,by="ChildID",all=T)
#Assigning values for children uploaded from OSF
#I'm going to assign value for new children here, so it won't be messed up later in case we increase the dataset
other_data_fs[c(29,31), c('Language', 'corpus')] <- 'French'
other_data_fs[c(29,31), 'C_count'] <- '21'
other_data_fs[c(29,31), 'V_count'] <- '17'
other_data_fs[c(29,31), 'Syllable complexity'] <- 'High'
other_data_fs['29', 'Age in months'] <- '31.4'
other_data_fs['31', 'Age in months'] <- '3'
other_data_fs[c(32:38), c('Language', 'corpus')] = "Tsimane"
other_data_fs[c(32:38), 'C_count'] = "25"
other_data_fs[c(32:38), 'V_count'] = "18"
other_data_fs[c(32:38), 'Syllable complexity'] <- 'Moderate'
other_data_fs[c(32:33, 38), 'Gender'] <- 'F'
other_data_fs[c(34:37), 'Gender'] <- 'M'
other_data_fs[c(32:33), 'Age in months'] <- '32'
other_data_fs[c(34:35), 'Age in months'] <- '20'
other_data_fs[c(36:37), 'Age in months'] <- '48'
other_data_fs['38', 'Age in months'] <- '35'
other_data_fs$'Age in months' <- as.numeric(other_data_fs$'Age in months')
#and next we add French & Solomon
#best_data <- merge(best_data,other_data_fs,by="ChildID",all=T) #this way doesn't combine datasets properly
best_data_final <- rbind.fill(best_data2,other_data_fs)
#stopped here!
# what is missing is:
# fill in age for 2 French children who are missing age, we can tell the age from the file name:
# FRH_020712 is 2 years 7 months 12 days -DONE
#GOG_000302 3 months 2 days - CP is 0, Should we eliminate this child in this case?
##CLEANING
best_data_final$syl_comp <- factor(best_data_final$`Syllable complexity`, levels=c("Low","Moderate","High"))
best_data_final$lang <- as.factor(best_data_final$Language)
best_data_final$age <-  as.numeric(coalesce(best_data_final$`Age in months`, best_data_final$Age))
best_data_final <- best_data_final %>%
filter(age <= 40) #after this your data reduces to 72 observations (<40) which you care about.
table(best_data_final$ChildID)[order(table(best_data_final$ChildID))]
best_data_clean=best_data_final[,c("age","lang","corpus", "syl_comp","C_count","V_count","CR")]
#DATASET WITH PHONETIC PROPERTIES ---------------------------------
#adding a file with phonetic data
phon_data<- read_excel("C:/Users/Lenovo/Desktop/UNISI/ENS Traineeship/GIT/LangComplexity/Data/LAAC_Internship2020_Languages_upd.xlsx")
#MERGING TWO DATASETS TOGETHER
#select the columns to merge from the Languages file
phon_data <-phon_data %>% select(Language, Maddieson_C_inv, Maddieson_VQ_Inv, Maddieson_sylcomp)
phon_data$lang <- as.factor(phon_data$Language)
phon_data$Language <- NULL
#merge the selected columns into one dataset
mydata_sub<-merge(best_data_clean,phon_data, by="lang", all=T)
mydata_sub <- dplyr::distinct(mydata_sub) # TO GET RID OF DUPLICATES
mydata_sub<-subset(mydata_sub, !is.na(CR)) #NA in CR are excluded -> 72 children
mydata_sub$Mad_syl_comp <- factor(mydata_sub$`Maddieson_sylcomp`, levels=c("Low","Moderate","High"))
mydata_sub$Mad_C <- factor(mydata_sub$`Maddieson_C_inv`, levels=c("Moderately Small","Average","Large"))
mydata_sub$Mad_VQ <-factor(mydata_sub$`Maddieson_VQ_Inv`, levels=c("Average","Large"))
mydata_sub$syl_comp <- NULL
mydata_sub$Maddieson_sylcomp <- NULL
mydata_sub$Maddieson_C_inv <- NULL
mydata_sub$Maddieson_VQ_Inv <- NULL
mydata_sub<-subset(mydata_sub, !is.na(Mad_C)) #NA are excluded -> 63 children
#correction some definitions in data
mydata_sub$C_count <- as.numeric(mydata_sub$C_count)
mydata_sub$V_count <- as.numeric(mydata_sub$V_count)
mydata_sub$corpus <- as.factor(mydata_sub$corpus)
summary(mydata_sub)
dim(mydata_sub)
#Histograms
hist(mydata_sub$CR,main="CR",xlab="CR") #quite normally distributed
#Plots
###Consonants - doesn't look impressive. The data quite unbalanced with average property leading
ggplot(mydata_sub,aes(x=CR,fill=Mad_C))+
geom_histogram(bins=20,color="black") +
facet_grid(.~Mad_C)+
labs(x = "Canonical Proportion")+
labs(y = "Consonants")+
labs(title = 'Distributinon of Consonants')
###Vowels
ggplot(mydata_sub,aes(x=CR,fill=Mad_VQ))+
geom_histogram(bins=20,color="black") +
facet_grid(.~Mad_VQ)+
labs(x = "Canonical Proportion")+
labs(y = "Vowels")+
labs(title = 'Distributinon of Vowels')
library("ggridges")
ggplot(mydata_sub,aes(x = age, y = Mad_syl_comp)) +
geom_density_ridges_gradient(aes(fill = ..x..), scale = 3, size = 0.3) +
scale_fill_gradientn(colours = c("#0D0887FF", "#CC4678FF", "#F0F921FF"),name = "Age")+
labs(x = "Age (months)")+
labs(y = "Syllable Complexity")+
labs(title = 'Distributinon of Syllable Complexity')
ggplot(mydata_sub,aes(x = CR, y = Mad_C)) +
geom_density_ridges_gradient(aes(fill = ..x..), scale = 3, size = 0.3) +
scale_fill_gradientn(colours = c("#0D0887FF", "#CC4678FF", "#F0F921FF"),name = "Age")+
labs(x = "Canonical Proportion")+
labs(y = "Consonants")+
labs(title = 'Distributinon of Consonants')
ggplot(mydata_sub,aes(x = CR, y = Mad_VQ)) +
geom_density_ridges_gradient(aes(fill = ..x..), scale = 3, size = 0.3) +
scale_fill_gradientn(colours = c("#0D0887FF", "#CC4678FF", "#F0F921FF"),name = "Age")+
labs(x = "Canonical Proportion")+
labs(y = "Vowels")+
labs(title = 'Distributinon of Vowels')
ggplot(mydata_sub, aes(x=age, y=CR, color=lang)) +
labs(colour = "Languages", shape="Languages") +
labs(x = "Age (months)")+
labs(y = "CP")+
geom_point()+
# Add regression lines
geom_smooth(method=lm,se=FALSE)
"Average CR"; mean(mydata_sub$CR) ; "Standard Deviation" ; sd(mydata_sub$CR)
#Consonants
"Average CR for Consonants: Moderately Small"; mean(mydata_sub$CR[mydata_sub$Mad_C == "Moderately Small"]) ; "Standard Deviation" ; sd(mydata_sub$CR[mydata_sub$Mad_C == "Moderately Small"])
"Average CR for Consonants: Average"; mean(mydata_sub$CR[mydata_sub$Mad_C == "Average"]) ; "Standard Deviation" ; sd(mydata_sub$CR[mydata_sub$Mad_C == "Average"])
boxplot(mydata_sub$CR~mydata_sub$Mad_C, main="Distribution of CP by Consonants", xlab="Consonants", ylab="CP")
library(ggpol)
library(scales)
ggplot(mydata_sub, aes(x = factor(Mad_C,
labels = c("Moderately Small","Average","Large")),y = CR, fill=Mad_C)) +
geom_boxjitter(color="black", jitter.color = "darkgrey", errorbar.draw = TRUE) +
scale_y_continuous() +
labs(title = "Distribution of CP by Consonants",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
#Vowels
"Average CR for Vowels: Average"; mean(mydata_sub$CR[mydata_sub$Mad_VQ == "Average"]) ; "Standard Deviation" ; sd(mydata_sub$CR[mydata_sub$Mad_VQ == "Average"])
"Average CR for Consonants: Large"; mean(mydata_sub$CR[mydata_sub$Mad_VQ == "Large"]) ; "Standard Deviation" ; sd(mydata_sub$CR[mydata_sub$Mad_VQ == "Large"])
boxplot(mydata_sub$CR~mydata_sub$Mad_VQ, main="Distribution of CP by Vowels", xlab="Vowels", ylab="CP")
ggplot(mydata_sub, aes(x = factor(Mad_VQ,
labels = c("Average","Large")),y = CR, fill=Mad_VQ)) +
geom_boxjitter(color="black", jitter.color = "darkgrey", errorbar.draw = TRUE) +
scale_y_continuous() +
labs(title = "Distribution of CP by Vowels",
x = "",
y = "") +
theme_minimal() +
theme(legend.position = "none")
attach(mydata_sub)
lm_data <- lm(CR ~ age + Mad_C + Mad_VQ, data = mydata_sub)
summary(lm_data)
summary(lm(age ~ CR +  Mad_VQ + Mad_C))
#kable
library(ggiraphExtra)
ggPredict(lm_data,se=TRUE,interactive=TRUE)
lm_data2 <- lm(formula = CR ~ age * (Mad_C + Mad_VQ), data = mydata_sub)
summary(lm_data2)
ggPredict(lm_data2,se=TRUE,interactive=TRUE)
lm_data3 <- lm(formula = CR ~ age * Mad_syl_comp, data = mydata_sub)
summary(lm_data3)
ggPredict(lm_data3,se=TRUE,interactive=TRUE)
library(ggiraphExtra)
ggPredict(lm_data,se=TRUE,interactive=TRUE)
lm_data2 <- lm(formula = CR ~ age * Mad_C, data = mydata_sub)
summary(lm_data2)
ggPredict(lm_data2,se=TRUE,interactive=TRUE)
lm_data3 <- lm(formula = CR ~ age * Mad_VQ, data = mydata_sub)
summary(lm_data3)
ggPredict(lm_data3,se=TRUE,interactive=TRUE)
lm_data4 <- lm(formula = CR ~ age * Mad_syl_comp, data = mydata_sub)
summary(lm_data4)
ggPredict(lm_data4,se=TRUE,interactive=TRUE)
lm_data2 <- lm(formula = CR ~ age + Mad_C, data = mydata_sub)
summary(lm_data2)
ggPredict(lm_data2,se=TRUE,interactive=TRUE)
lm_data3 <- lm(formula = CR ~ age + Mad_VQ, data = mydata_sub)
summary(lm_data3)
ggPredict(lm_data3,se=TRUE,interactive=TRUE)
lm_data_C <- lm(formula = CR~age*Mad_C, data = mydata_sub)
summary(lm_data_C)
ggPredict(lm_data_C,se=TRUE,interactive=TRUE)
plot(lm_data_C)
gvlma(lm_data_C)
lm_data_C <- lm(formula = CR~age*Mad_C, data = mydata_sub)
summary(lm_data_C)
ggPredict(lm_data_C,se=TRUE,interactive=TRUE)
par(mfrow=c(2,2))
plot(lm_data_C)
gvlma(lm_data_C)
gvlma(lm_data_V)
gvlma(lm_data_C)
lm_data_V <- lm(formula = CR~age*Mad_VQ, data = mydata_sub)
summary(lm_data_V )
ggPredict(lm_data_V ,se=TRUE,interactive=TRUE)
par(mfrow=c(2,2))
plot(lm_data_V)
gvlma(lm_data_V)
lm_data_SC <- lm(formula = CR ~ age * Mad_syl_comp, data = mydata_sub)
summary(lm_data_SC)
ggPredict(lm_data_SC,se=TRUE,interactive=TRUE)
par(mfrow=c(2,2))
plot(lm_data_SC)
gvlma(lm_data_SC
gvlma(lm_data_SC)
lm_data_SC <- lm(formula = CR ~ age * Mad_syl_comp, data = mydata_sub)
summary(lm_data_SC)
ggPredict(lm_data_SC,se=TRUE,interactive=TRUE)
par(mfrow=c(2,2))
plot(lm_data_SC)
gvlma(lm_data_SC)
Anova(lm_data_SC, type="III")
ggscatter(
mydata_sub, x = "age", y = "CR",
facet.by  = c("Mad_C", "Mad_VQ"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
library("ggpubr")
ggscatter(
mydata_sub, x = "age", y = "CR",
facet.by  = c("Mad_C", "Mad_VQ"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "age", y = "CR",
facet.by  = c("Mad_C", "lang"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "age", y = "CR",
facet.by  = c("Mad_C", "corpus"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "age", y = "CR",
facet.by  = c("lang", "Mad_C"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "age", y = "CR",
facet.by  = c("corpus", "Mad_C"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "CR", y = "age",
facet.by  = c("corpus", "Mad_C"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "CR", y = "age",
facet.by  = c("corpus", "Mad_VQ"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
# Models -----------------------------------------
ggscatter(
mydata_sub, x = "CR", y = "age",
facet.by  = c("Mad_syl_comp", "Mad_VQ"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "CR", y = "age",
facet.by  = c("Mad_VQ", "Mad_syl_comp"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
mydata_sub, x = "CR", y = "age",
facet.by  = c("Mad_C", "Mad_syl_comp"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
library(tidyverse) # I wasn't able to run this package from groundhog in Windows
library(car) # I wasn't able to run this package from groundhog in Windows
#new library for graphs
library(ggpubr)
library(ggiraphExtra)
library(groundhog)
groundhog.day="2021-02-23"
pkgs=c('tidyverse','ggplot2', 'gvlma','car','RCurl','plyr','readxl','knitr',
'rmarkdown')
groundhog.library(pkgs, groundhog.day)
# Seed for random number generation
set.seed(22)
#document session info
capture.output(sessionInfo(),file="lastknit_session_info.txt")
opts_chunk$set(echo = TRUE)
pwc2 <- pwc2 %>% add_xy_position(x = "Mad_C", fun = "mean_se")
res.aov <- mydata_sub %>%
anova_test(CR ~ age + Mad_syl_comp*Mad_C)
library(rstatix)
library(broom)
res.aov <- mydata_sub %>%
anova_test(CR ~ age + Mad_syl_comp*Mad_C)
get_anova_table(res.aov)
pwc2 <- pwc2 %>% add_xy_position(x = "Mad_C", fun = "mean_se")
res.aov <- mydata_sub %>%
anova_test(CR ~ age + Mad_syl_comp*Mad_C)
get_anova_table(res.aov)
pwc2 <- mydata_sub %>%
group_by(Mad_syl_comp) %>%
emmeans_test(
score ~ Mad_C, covariate = age,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
install.packages("emmeans")
res.aov <- mydata_sub %>%
anova_test(CR ~ age + Mad_syl_comp*Mad_C)
get_anova_table(res.aov)
pwc2 <- mydata_sub %>%
group_by(Mad_syl_comp) %>%
emmeans_test(
score ~ Mad_C, covariate = age,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
res.aov <- mydata_sub %>%
anova_test(CR ~ age + Mad_syl_comp*Mad_C)
get_anova_table(res.aov)
pwc2 <- mydata_sub %>%
group_by(Mad_syl_comp) %>%
emmeans_test(
CR ~ Mad_C, covariate = age,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc2 %>% filter(Mad_syl_comp == "yes")
pwc2 <- pwc2 %>% add_xy_position(x = "Mad_C", fun = "mean_se")
rlang::last_error()
res.aov <- mydata_sub %>%
anova_test(CR ~ age + Mad_syl_comp*Mad_C)
get_anova_table(res.aov)
pwc2 <- mydata_sub %>%
group_by(Mad_syl_comp) %>%
emmeans_test(
CR ~ Mad_C, covariate = age,
p.adjust.method = "bonferroni"
) %>%
select(-statistic, -p) # Remove details
pwc2 %>% filter(Mad_syl_comp == "yes")
pwc2 <- pwc2 %>% add_xy_position(x = "Mad_C", fun = "mean_se")
model  <- lm(CR ~ age*Mad_C*Mad_syl_comp, data = mydata_sub)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
ggqqplot(mydata_sub, "CR", ggtheme = theme_bw()) +
facet_grid(age + Mad_C ~ Mad_syl_comp, labeller = "label_both")
ggqqplot(mydata_sub, "CR", ggtheme = theme_bw()) +
facet_grid(Mad_C + Mad_syl_comp ~ age, labeller = "label_both")
ggqqplot(mydata_sub, "age", ggtheme = theme_bw()) +
facet_grid(Mad_C + Mad_syl_comp ~ CR, labeller = "label_both")
ggqqplot(mydata_sub, "age", ggtheme = theme_bw()) +
facet_grid(Mad_VQ + Mad_syl_comp ~ CR, labeller = "label_both")
ggqqplot(mydata_sub, "CR", ggtheme = theme_bw()) +
facet_grid(Mad_VQ + Mad_syl_comp ~ Mad_CQ, labeller = "label_both")
ggqqplot(mydata_sub, "CR", ggtheme = theme_bw()) +
facet_grid(Mad_VQ + Mad_syl_comp ~ Mad_C, labeller = "label_both")
"Average CR"; mean(mydata_sub$CR) ; "Standard Deviation" ; sd(mydata_sub$CR)
hist(mydata_sub$CR, breaks=100, freq = F, xlim = c(0,10))
plot(function(mydata_sub)dnorm(mydata_sub$CR, mean = 0.4, sd=0,17),0,10 add = T)
hist(mydata_sub$CR, breaks=100, freq = F, xlim = c(0,10))
plot(function(mydata_sub)dnorm(mydata_sub$CR, mean = 0.4, sd=0,17), 0, 10, add = T)
hist(mydata_sub$CR, breaks=100, freq = F, xlim = c(0,10))
plot(function(mydata_sub)dnorm(mydata_sub, mean = 0.4, sd=0,17), 0, 10, add = T)
mean(mydata_sub)
hist(mydata_sub$CR, breaks=50, freq = F, xlim = c(0,10))
plot(function(mydata_sub)dnorm(mydata_sub$CR, mean = 0.4, sd=0,17), 0, 10, add = T)
model1 <- mydata_sub$CR
hist(model1, breaks=50, freq = F, xlim = c(0,10))
plot(function(model1)dnorm(model1, mean = 0.4, sd=0,17), 0, 10, add = T)
hist(model1, breaks=50, freq = F, xlim = c(0,5))
plot(function(model1)dnorm(model1, mean = 0.4, sd=0,17), 0, 10, add = T)
hist(model1, breaks=50, freq = F, xlim = c(0,1))
plot(function(model1)dnorm(model1, mean = 0.4, sd=0,17), 0, 10, add = T)
