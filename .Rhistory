best_data_sub$age <-  coalesce(best_data_sub$age, best_data_sub$Age) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$age <- as.(best_data_sub$`Age in months`)
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$age <- as.(best_data_sub$`Age in months`)
best_data_sub$age <- as(best_data_sub$`Age in months`)
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
#DELETE
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
library(tidyverse) # I wasn't able to run this package from groundhog in Windows
library(car) # I wasn't able to run this package from groundhog in Windows
library(groundhog)
groundhog.day="2021-02-23"
pkgs=c('ggplot2','gvlma','RCurl','plyr','readxl','knitr',
'rmarkdown')
groundhog.library(pkgs, groundhog.day)
# Seed for random number generation
set.seed(22)
#document session info
capture.output(sessionInfo(),file="lastknit_session_info.txt")
opts_chunk$set(echo = TRUE)
raw_eaf_data<- read_excel("RawData/Raw_data_full.xlsx")
raw_eaf_data$Subtier_type<-NA
raw_eaf_data$Subtier_type[grep("vcm",raw_eaf_data$Subtier)]<-"vcm"
raw_eaf_data$clean_ChildID <- gsub("_period.*","",gsub("_._period.*","",raw_eaf_data$Filename))
raw_eaf_data$clean_ChildID <- gsub("random.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("periodic.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("_LD.*","",raw_eaf_data$clean_ChildID)
vcm_tab <- table(raw_eaf_data$clean_ChildID[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"],raw_eaf_data$Type[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"])
vcm_tab_chi_eaf <- vcm_tab[,"C"]/(vcm_tab[,"C"]+vcm_tab[,"N"])
# Generate canonical proportion for data from Cychosz
#contains: Casillas-Yeli       Cychosz Seedlings      Tsimane    Warlaumont
raw_cychosz_data<- read_csv("Data/meta_answers_global_crossling_9-20.csv")
raw_cychosz_data$unique_child_ID <- paste(raw_cychosz_data$language,raw_cychosz_data$child_ID)
vcm_tab <- table(raw_cychosz_data$unique_child_ID,raw_cychosz_data$Answer)
vcm_tab_chi_cychosz <- vcm_tab[,"Canonical"]/(vcm_tab[,"Canonical"]+vcm_tab[,"Non-canonical"])
# Generate canonical proportion for data from Zooniverse #TODO
#contains: Yélî & Tsimane
#Previous datasets with containing Metadata e.g. age
other_data<- read_excel("Data/CR_by_child-updated_21_01.xlsx")
other_data_tsi<- read_excel("Data/CR_by_child_tsi.xlsx")
# we'll use the best and most data we can:
#- Yélî will come from zooniverse-other DONE
#- Tsimane will come from zooniverse-tsi DONE
#- French Solomon from eaf DONE
#- the rest of the corpora will come from cychosz TODO
#also, we want to be able to merge our CPs into other_data because other_data has age of the child
best_data=other_data[other_data$corpus %in% c("Yélî"),]
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
View(best_data_sub)
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$syl_comp <- as.factor(best_data_sub$`Syllable complexity`)
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$`Syllable complexity` <- NULL
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CP","clean_ChildID")
vcm_tab_chi_eaf2$CP <- as.numeric(as.character(vcm_tab_chi_eaf2$CP))
View(vcm_tab_chi_eaf2)
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
View(other_data_fs)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
View(other_data_fs_sub)
View(vcm_tab_chi_eaf2)
other_data_fs_sub$Multinlingualism_likelihood <- NULL
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$age  <- as.numeric(mydata$`Age in months`)
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
best_data_sub$`Syllable complexity` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#and next we add French & Solomon
best_data_sub2 <- merge(best_data_sub,other_data_fs_sub,by="ChildID",all=T)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#and next we add French & Solomon
best_data_sub2 <- merge(best_data_sub,other_data_fs_sub,by="ChildID",all=T)
View(best_data_sub2)
#and next we add French & Solomon
best_data_sub2 <- rbind.fill(best_data_sub,other_data_fs_sub)
View(best_data_sub2)
library(tidyverse) # I wasn't able to run this package from groundhog in Windows
library(car) # I wasn't able to run this package from groundhog in Windows
library(groundhog)
groundhog.day="2021-02-23"
pkgs=c('ggplot2','gvlma','RCurl','plyr','readxl','knitr',
'rmarkdown')
groundhog.library(pkgs, groundhog.day)
# Seed for random number generation
set.seed(22)
#document session info
capture.output(sessionInfo(),file="lastknit_session_info.txt")
opts_chunk$set(echo = TRUE)
raw_eaf_data<- read_excel("RawData/Raw_data_full.xlsx")
raw_eaf_data$Subtier_type<-NA
raw_eaf_data$Subtier_type[grep("vcm",raw_eaf_data$Subtier)]<-"vcm"
raw_eaf_data$clean_ChildID <- gsub("_period.*","",gsub("_._period.*","",raw_eaf_data$Filename))
raw_eaf_data$clean_ChildID <- gsub("random.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("periodic.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("_LD.*","",raw_eaf_data$clean_ChildID)
vcm_tab <- table(raw_eaf_data$clean_ChildID[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"],raw_eaf_data$Type[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"])
vcm_tab_chi_eaf <- vcm_tab[,"C"]/(vcm_tab[,"C"]+vcm_tab[,"N"])
# Generate canonical proportion for data from Cychosz
#contains: Casillas-Yeli       Cychosz Seedlings      Tsimane    Warlaumont
raw_cychosz_data<- read_csv("Data/meta_answers_global_crossling_9-20.csv")
raw_cychosz_data$unique_child_ID <- paste(raw_cychosz_data$language,raw_cychosz_data$child_ID)
vcm_tab <- table(raw_cychosz_data$unique_child_ID,raw_cychosz_data$Answer)
vcm_tab_chi_cychosz <- vcm_tab[,"Canonical"]/(vcm_tab[,"Canonical"]+vcm_tab[,"Non-canonical"])
# Generate canonical proportion for data from Zooniverse #TODO
#contains: Yélî & Tsimane
#Previous datasets with containing Metadata e.g. age
other_data<- read_excel("Data/CR_by_child-updated_21_01.xlsx")
other_data_tsi<- read_excel("Data/CR_by_child_tsi.xlsx")
# we'll use the best and most data we can:
#- Yélî will come from zooniverse-other DONE
#- Tsimane will come from zooniverse-tsi DONE
#- French Solomon from eaf DONE
#- the rest of the corpora will come from cychosz TODO
#also, we want to be able to merge our CPs into other_data because other_data has age of the child
best_data=other_data[other_data$corpus %in% c("Yélî"),]
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
#DELETE
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$syl_comp <- as.factor(best_data_sub$`Syllable complexity`)
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$`Syllable complexity` <- NULL
#next, add French & Solomon
#to this end, first we need to add the CPs
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CP","clean_ChildID")
vcm_tab_chi_eaf2$CP <- as.numeric(as.character(vcm_tab_chi_eaf2$CP))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
View(other_data_fs_sub)
View(best_data_sub)
#and next we add French & Solomon
best_data_sub2 <- rbind.fill(best_data_sub,other_data_fs_sub)
View(best_data_sub2)
View(best_data_sub2)
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CP <- as.numeric(as.character(vcm_tab_chi_eaf2$CP))
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CP))
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CR))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#and next we add French & Solomon
View(best_data_sub2)
View(vcm_tab_chi_eaf2)
# Generate canonical proportion for data from .eaf (OSF)
# French Solomon Tsimane
raw_eaf_data<- read_excel("RawData/Raw_data_full.xlsx")
raw_eaf_data$Subtier_type<-NA
raw_eaf_data$Subtier_type[grep("vcm",raw_eaf_data$Subtier)]<-"vcm"
raw_eaf_data$clean_ChildID <- gsub("_period.*","",gsub("_._period.*","",raw_eaf_data$Filename))
raw_eaf_data$clean_ChildID <- gsub("random.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("periodic.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("_LD.*","",raw_eaf_data$clean_ChildID)
vcm_tab <- table(raw_eaf_data$clean_ChildID[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"],raw_eaf_data$Type[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"])
vcm_tab_chi_eaf <- vcm_tab[,"C"]/(vcm_tab[,"C"]+vcm_tab[,"N"])
# Generate canonical proportion for data from Cychosz
#contains: Casillas-Yeli       Cychosz Seedlings      Tsimane    Warlaumont
raw_cychosz_data<- read_csv("Data/meta_answers_global_crossling_9-20.csv")
raw_cychosz_data$unique_child_ID <- paste(raw_cychosz_data$language,raw_cychosz_data$child_ID)
vcm_tab <- table(raw_cychosz_data$unique_child_ID,raw_cychosz_data$Answer)
vcm_tab_chi_cychosz <- vcm_tab[,"Canonical"]/(vcm_tab[,"Canonical"]+vcm_tab[,"Non-canonical"])
# Generate canonical proportion for data from Zooniverse #TODO
#contains: Yélî & Tsimane
#Previous datasets with containing Metadata e.g. age
other_data<- read_excel("Data/CR_by_child-updated_21_01.xlsx")
other_data_tsi<- read_excel("Data/CR_by_child_tsi.xlsx")
# we'll use the best and most data we can:
#- Yélî will come from zooniverse-other DONE
#- Tsimane will come from zooniverse-tsi DONE
#- French Solomon from eaf DONE
#- the rest of the corpora will come from cychosz TODO
#also, we want to be able to merge our CPs into other_data because other_data has age of the child
best_data=other_data[other_data$corpus %in% c("Yélî"),]
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
#DELETE
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$syl_comp <- as.factor(best_data_sub$`Syllable complexity`)
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$`Syllable complexity` <- NULL
#next, add French & Solomon
#to this end, first we need to add the CPs
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CR))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#and next we add French & Solomon
best_data_sub2 <- rbind.fill(best_data_sub,other_data_fs_sub)
View(vcm_tab_chi_eaf2)
View(other_data_fs_sub)
View(other_data_fs_sub)
View(`*tmp*`)
library(tidyverse) # I wasn't able to run this package from groundhog in Windows
library(car) # I wasn't able to run this package from groundhog in Windows
library(groundhog)
groundhog.day="2021-02-23"
pkgs=c('ggplot2','gvlma','RCurl','plyr','readxl','knitr',
'rmarkdown')
groundhog.library(pkgs, groundhog.day)
# Seed for random number generation
set.seed(22)
#document session info
capture.output(sessionInfo(),file="lastknit_session_info.txt")
opts_chunk$set(echo = TRUE)
# Generate canonical proportion for data from .eaf (OSF)
# French Solomon Tsimane
raw_eaf_data<- read_excel("RawData/Raw_data_full.xlsx")
raw_eaf_data$Subtier_type<-NA
raw_eaf_data$Subtier_type[grep("vcm",raw_eaf_data$Subtier)]<-"vcm"
raw_eaf_data$clean_ChildID <- gsub("_period.*","",gsub("_._period.*","",raw_eaf_data$Filename))
raw_eaf_data$clean_ChildID <- gsub("random.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("periodic.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("_LD.*","",raw_eaf_data$clean_ChildID)
vcm_tab <- table(raw_eaf_data$clean_ChildID[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"],raw_eaf_data$Type[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"])
vcm_tab_chi_eaf <- vcm_tab[,"C"]/(vcm_tab[,"C"]+vcm_tab[,"N"])
# Generate canonical proportion for data from Cychosz
#contains: Casillas-Yeli       Cychosz Seedlings      Tsimane    Warlaumont
raw_cychosz_data<- read_csv("Data/meta_answers_global_crossling_9-20.csv")
raw_cychosz_data$unique_child_ID <- paste(raw_cychosz_data$language,raw_cychosz_data$child_ID)
vcm_tab <- table(raw_cychosz_data$unique_child_ID,raw_cychosz_data$Answer)
vcm_tab_chi_cychosz <- vcm_tab[,"Canonical"]/(vcm_tab[,"Canonical"]+vcm_tab[,"Non-canonical"])
# Generate canonical proportion for data from Zooniverse #TODO
#contains: Yélî & Tsimane
#Previous datasets with containing Metadata e.g. age
other_data<- read_excel("Data/CR_by_child-updated_21_01.xlsx")
other_data_tsi<- read_excel("Data/CR_by_child_tsi.xlsx")
# we'll use the best and most data we can:
#- Yélî will come from zooniverse-other DONE
#- Tsimane will come from zooniverse-tsi DONE
#- French Solomon from eaf DONE
#- the rest of the corpora will come from cychosz TODO
#also, we want to be able to merge our CPs into other_data because other_data has age of the child
best_data=other_data[other_data$corpus %in% c("Yélî"),]
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
#DELETE
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$syl_comp <- as.factor(best_data_sub$`Syllable complexity`)
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$`Syllable complexity` <- NULL
#next, add French & Solomon
#to this end, first we need to add the CPs
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CR))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#what if we get rid of CR column here so in the following merging we could work with R calculated data
best_data_sub$CR <- NULL
View(best_data)
View(best_data_sub)
#and next we add French & Solomon
best_data_sub2 <- rbind.fill(best_data_sub,other_data_fs_sub)
View(best_data_sub2)
best_data_sub <- rbind.fill(best_data,other_data_tsi)
#DELETE
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$syl_comp <- as.factor(best_data_sub$`Syllable complexity`)
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$`Syllable complexity` <- NULL
#next, add French & Solomon
#to this end, first we need to add the CPs
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CR))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#and next we add French & Solomon
best_data_sub2 <- rbind.fill(best_data_sub,other_data_fs_sub)
library(tidyverse) # I wasn't able to run this package from groundhog in Windows
library(car) # I wasn't able to run this package from groundhog in Windows
library(groundhog)
groundhog.day="2021-02-23"
pkgs=c('ggplot2','gvlma','RCurl','plyr','readxl','knitr',
'rmarkdown')
groundhog.library(pkgs, groundhog.day)
# Seed for random number generation
set.seed(22)
#document session info
capture.output(sessionInfo(),file="lastknit_session_info.txt")
opts_chunk$set(echo = TRUE)
raw_eaf_data<- read_excel("RawData/Raw_data_full.xlsx")
raw_eaf_data$Subtier_type<-NA
raw_eaf_data$Subtier_type[grep("vcm",raw_eaf_data$Subtier)]<-"vcm"
raw_eaf_data$clean_ChildID <- gsub("_period.*","",gsub("_._period.*","",raw_eaf_data$Filename))
raw_eaf_data$clean_ChildID <- gsub("random.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("periodic.*","",raw_eaf_data$clean_ChildID)
raw_eaf_data$clean_ChildID <- gsub("_LD.*","",raw_eaf_data$clean_ChildID)
vcm_tab <- table(raw_eaf_data$clean_ChildID[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"],raw_eaf_data$Type[raw_eaf_data$Subtier_type=="vcm" & raw_eaf_data$Tier=="CHI"])
vcm_tab_chi_eaf <- vcm_tab[,"C"]/(vcm_tab[,"C"]+vcm_tab[,"N"])
# Generate canonical proportion for data from Cychosz
#contains: Casillas-Yeli       Cychosz Seedlings      Tsimane    Warlaumont
raw_cychosz_data<- read_csv("Data/meta_answers_global_crossling_9-20.csv")
raw_cychosz_data$unique_child_ID <- paste(raw_cychosz_data$language,raw_cychosz_data$child_ID)
vcm_tab <- table(raw_cychosz_data$unique_child_ID,raw_cychosz_data$Answer)
vcm_tab_chi_cychosz <- vcm_tab[,"Canonical"]/(vcm_tab[,"Canonical"]+vcm_tab[,"Non-canonical"])
# Generate canonical proportion for data from Zooniverse #TODO
#contains: Yélî & Tsimane
#Previous datasets with containing Metadata e.g. age
other_data<- read_excel("Data/CR_by_child-updated_21_01.xlsx")
other_data_tsi<- read_excel("Data/CR_by_child_tsi.xlsx")
# we'll use the best and most data we can:
#- Yélî will come from zooniverse-other DONE
#- Tsimane will come from zooniverse-tsi DONE
#- French Solomon from eaf DONE
#- the rest of the corpora will come from cychosz TODO
#also, we want to be able to merge our CPs into other_data because other_data has age of the child
best_data=other_data[other_data$corpus %in% c("Yélî"),]
#next, add tsi kids
#best_data_sub <- merge(best_data,other_data_tsi,by="ChildID", all=T)
##best_data_sub <- dplyr::distinct(best_data_sub) # TO GET RID OF DUPLICATES
best_data_sub <- rbind.fill(best_data,other_data_tsi)
#DELETE
best_data_sub$`CR Adults`<- NULL #to drop an irrelevant column
best_data_sub$Multinlingualism_likelihood <- NULL
best_data_sub$`ITS` <- NULL
best_data_sub$...1 <- NULL
best_data_sub$syl_comp <- as.factor(best_data_sub$`Syllable complexity`)
best_data_sub$age <-  as.numeric(coalesce(best_data_sub$`Age in months`, best_data_sub$Age)) #combining age of both datasets
best_data_sub <- best_data_sub %>%
filter(age <= 40) #after this your data reduces to 120 observations (<40) which you care about.
best_data_sub$`Age in months` <- NULL
best_data_sub$`Age` <- NULL
best_data_sub$`Syllable complexity` <- NULL
#next, add French & Solomon
#to this end, first we need to add the CPs
vcm_tab_chi_eaf2=data.frame(cbind(vcm_tab_chi_eaf,names(vcm_tab_chi_eaf)))
colnames(vcm_tab_chi_eaf2)<-c("CR","clean_ChildID")
vcm_tab_chi_eaf2$CR <- as.numeric(as.character(vcm_tab_chi_eaf2$CR))
#subset to French & Solomon
other_data_fs <- subset(other_data, corpus %in% c("French","Solomon"))
other_data_fs$clean_ChildID <-gsub("_period.*","",gsub("_._period.*","",other_data_fs$ChildID))
other_data_fs$clean_ChildID <- gsub("random.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("periodic.*","",other_data_fs$clean_ChildID)
other_data_fs$clean_ChildID <- gsub("_LD.*","",other_data_fs$clean_ChildID)
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
#DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
View(best_data_sub)
View(other_data_fs_sub)
View(other_data_fs)
View(vcm_tab_chi_eaf2)
#what if we get rid of CR column here so in the following merging we could work with R calculated data
other_data_fs$CR <- NULL
other_data_fs_sub <- merge(other_data_fs,vcm_tab_chi_eaf2,by="clean_ChildID",all=T)
DELETE
other_data_fs_sub$`CR Adults`<- NULL #to drop an irrelevant column
other_data_fs_sub$Multinlingualism_likelihood <- NULL
other_data_fs_sub$age  <- as.numeric(other_data_fs_sub$`Age in months`)
#other_data_fs_sub$`ChildID` <- NULL
other_data_fs_sub$syl_comp <- as.factor(other_data_fs_sub$`Syllable complexity`)
other_data_fs_sub$`Age in months` <- NULL
other_data_fs_sub$`Syllable complexity` <- NULL
#and next we add French & Solomon
best_data_sub2 <- rbind.fill(best_data_sub,other_data_fs_sub)
View(best_data_sub2)
